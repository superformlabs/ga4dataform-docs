"use strict";(self.webpackChunkga_4_dataform=self.webpackChunkga_4_dataform||[]).push([[762],{1537:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=o(4848),t=o(8453);const a={title:"What's a compilation in Dataform",description:"This guide will explain you everything about compliation in Dataform",slug:"/release-configurations-compilations"},r=void 0,s={id:"dataform-academy/release-configurations-compilations",title:"What's a compilation in Dataform",description:"This guide will explain you everything about compliation in Dataform",source:"@site/docs/dataform-academy/release-configurations-compilations.md",sourceDirName:"dataform-academy",slug:"/release-configurations-compilations",permalink:"/docs/release-configurations-compilations",draft:!1,unlisted:!1,editUrl:"https://github.com/<your-org>/<your-repo>/edit/main/docs/docs/dataform-academy/release-configurations-compilations.md",tags:[],version:"current",frontMatter:{title:"What's a compilation in Dataform",description:"This guide will explain you everything about compliation in Dataform",slug:"/release-configurations-compilations"}},l={},c=[{value:"What is Compilation in General?",id:"what-is-compilation-in-general",level:2},{value:"Compilation in Dataform",id:"compilation-in-dataform",level:2},{value:"Why You Need to Compile Before Running Workflows",id:"why-you-need-to-compile-before-running-workflows",level:2},{value:"Key Takeaway",id:"key-takeaway",level:2}];function d(e){const n={h2:"h2",li:"li",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"what-is-compilation-in-general",children:"What is Compilation in General?"}),"\n",(0,i.jsx)(n.p,{children:"In computer science, compilation is the process of translating code written in a high-level language (like Java, C, or TypeScript) into a lower-level representation (machine code, bytecode, or JavaScript) that can actually be executed.\nThe compiler ensures that the code is syntactically valid, resolves dependencies, and produces an executable artifact. Without compilation, your code is just text \u2014 understandable by humans but not directly executable by a machine."}),"\n",(0,i.jsx)(n.h2,{id:"compilation-in-dataform",children:"Compilation in Dataform"}),"\n",(0,i.jsx)(n.p,{children:"Dataform applies the same principle to data pipelines.\nInstead of writing raw SQL, you use SQLX, a higher-level abstraction that includes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ref() statements to declare dependencies."}),"\n",(0,i.jsx)(n.li,{children:'Configurations such as type: "incremental".'}),"\n",(0,i.jsx)(n.li,{children:"Macros and includes to avoid repetitive code."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"These constructs don\u2019t exist in your data warehouse\u2019s SQL dialect. Before execution, Dataform needs to compile them into plain SQL that your warehouse can run."}),"\n",(0,i.jsx)(n.p,{children:"During compilation, Dataform:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Resolves references (turning ref("orders") into the fully qualified table name).'}),"\n",(0,i.jsx)(n.li,{children:"Validates configurations and dependencies."}),"\n",(0,i.jsx)(n.li,{children:"Builds a directed acyclic graph (DAG) of transformations."}),"\n",(0,i.jsx)(n.li,{children:"Generates the final SQL queries and execution plan."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The output is a set of compiled SQL statements and a dependency graph that ensures the right execution order."}),"\n",(0,i.jsx)(n.h2,{id:"why-you-need-to-compile-before-running-workflows",children:"Why You Need to Compile Before Running Workflows"}),"\n",(0,i.jsx)(n.p,{children:"When you push a new commit to your Dataform project, the code in your repository changes.\nHowever, your workflows don\u2019t automatically pick up these changes unless you recompile. Why?"}),"\n",(0,i.jsx)(n.p,{children:"Workflows run against the compiled graph, not directly against your repository code."}),"\n",(0,i.jsx)(n.p,{children:"If you don\u2019t recompile, your workflow may still point to the old compiled manifest, meaning your latest changes aren\u2019t reflected."}),"\n",(0,i.jsx)(n.p,{children:"This can cause confusion: your repo shows updated SQLX, but your scheduled or triggered workflow still runs the old version."}),"\n",(0,i.jsx)(n.p,{children:"In other words, compilation acts as a bridge between your repository and your warehouse execution. Until you update that bridge by compiling, the workflow will not see your new code."}),"\n",(0,i.jsx)(n.h2,{id:"key-takeaway",children:"Key Takeaway"}),"\n",(0,i.jsx)(n.p,{children:"Compilation in Dataform is the step that transforms your human-friendly SQLX into machine-executable SQL for your data warehouse. Just like in software engineering, skipping compilation means your latest code changes never make it into production.\nSo whenever you commit new transformations, remember: compile first, then run."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>s});var i=o(6540);const t={},a=i.createContext(t);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);